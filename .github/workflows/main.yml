on:
  issues: {types: opened}

jobs:
  comment:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@0.2.0
        with:
          github-token: ${{github.token}}
          script: |
            const encode = (string) => Buffer.from(string).toString('base64');
            const decode = (encoded) => Buffer.from(encoded, 'base64').toString();
            const nth = (n) => n += [,'st','nd','rd'][n%100>>3^1&&n%10] || 'th';

            const path = 'index.html';
            const username = context.payload.sender.login;

            const REGEX_COUNT = /<h2>(\d+)<\/h2>/;
            const REGEX_REASON = /<span class="reason">([^<]*)<\/span>/;
            const REGEX_AUTHOR = /<a href="https:\/\/github.com\/([^"]*)">@\1<\/a>/;
            const REGEX_ISSUE = /href="https:\/\/github.com\/jdhartley\/howmanytimeshasdavebeenfired.com\/(issues\/\d+)"/;

            // GATHER OLD DATA
            const files = await github.repos.getContents({ ...context.repo, path });
            const originalFile = files.data;
            const originalFileContent = decode(originalFile.content);

            // GATHER NEW DATA
            const [, oldCount] = originalFileContent.match(REGEX_COUNT);
            const newCount = parseInt(oldCount, 10) + 1;
            const reason = String(context.payload.issue.title);

            // CREATE COMMENT
            const commentBody = `Thanks for reporting that Dave needs to be fired, @${username}!

            Dave will be fired for the ${nth(newCount)} time in one moment.`
            await github.issues.createComment({ ...context.issue, body: commentBody });

            // CREATE COMMIT
            const commitMessage = `Firing @dskuza for ${reason}

            Fixes #${context.issue.number}. See it live at https://howmanytimeshasdavebeenfired.com/

            ${'ðŸ”¥'.repeat(newCount)}`;

            const newContent = originalFileContent
                .replace(REGEX_COUNT, `<h2>${newCount}</h2>`)
                .replace(`<em>${oldCount} times</em>`, `<em>${newCount} times</em>`)
                .replace(REGEX_REASON, (match, oldReason) => match.replace(oldReason, reason))
                .replace(REGEX_AUTHOR, (match, oldAuthor) => match.split(oldAuthor).join(username))
                .replace(REGEX_ISSUE, (match, oldIssue) => match.replace(oldIssue, `issues/${context.issue.number}`));

            await github.repos.createOrUpdateFile({
                ...context.repo,
                path,

                message: commitMessage,

                sha: originalFile.sha,
                content: encode(newContent),

                author: {
                    name: username,
                    email: `${username}@users.noreply.github.com`,
                }
            });
